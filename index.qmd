---
title: "flanker-datapipe"
embed-resources: true
execute:
  echo: true
  error: true
---

The purpose of this website is to test a workflow for persistent [jspsych](https://www.jspsych.org/7.3/) experiments using static webpages. 

1. The experiment is hosted on this github repository. 
2. Data is sent to an [OSF](https://osf.io) storage bucket using [datapipe](https://pipe.jspsych.org).
3. Find out if it is possible to use [webR](https://github.com/r-wasm/webr) to import data from osf, then analyse and plot it.

# Flanker experiment

This is just a demo to test the workflow. Clicking this link will load a short 24 trial flanker experiment. No identifying information is collected. The workflow includes sending the reaction time data from each trial to a repository on open-science foundation.

[ x ] - code flanker experiment

[ x ] - make OSF repository

[ x ] - add datapipe to send data to OSF repository

## Demo Experiment

<https://www.crumplab.com/flanker-datapipe/experiment/flanker.html>

## OSF project

<https://osf.io/4bzt2/>


## Analyze results

This approach analyzes the results locally whenever the quarto page is rendered.

```{r, eval = FALSE}
library(osfr)


# get project
flanker_data <- osf_retrieve_node("k5w3d")

#get file names
flanker_files <- osf_ls_files(flanker_data)

#download data files
osf_download(flanker_files, path = "data/")

```

```{r, message=FALSE,warning=FALSE}
library(dplyr)
library(rio)

# import individual json files and merge to tibble
file_list <- list.files("data", full.names = TRUE)
all_data <- lapply(file_list,rio::import)
all_data <- bind_rows(all_data)

# RT Analysis
filter_data <- all_data %>%
  filter(task == "response",
         correct == TRUE) %>%
  group_by(ID,distractor) %>%
  summarize(subject_mean_rt = mean(rt))
  
group_means <- filter_data %>%
  group_by(distractor) %>%
  summarize(group_mean_rt = mean(subject_mean_rt),
            sem = sd(subject_mean_rt)/sqrt(length(group_mean_rt)))

knitr::kable(group_means)

```

## webR

webR is a new tool to run R in the browser through web assembly. I'm cobbling together code from these sources:

repo: <https://github.com/r-wasm/webr/>

documentation: <https://docs.r-wasm.org/webr/latest/>

quarto example: <https://github.com/coatless-r-n-d/webR-quarto-demos>

Thanks to all of the webR developers for this!

```{=html}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css">
<style>
  .CodeMirror pre {
    background-color: unset !important;
  }
  .btn-webr {
    background-color: #EEEEEE;
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }
</style>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/r/r.js"></script>
<script type="module">
  import { WebR } from "https://webr.r-wasm.org/v0.1.0/webr.mjs";
  globalThis.webR = new WebR({
    SW_URL: "/"
  });
  await globalThis.webR.init();
  globalThis.webRCodeShelter = await new globalThis.webR.Shelter();
  document.querySelectorAll(".btn-webr").forEach((btn) => {
    btn.innerText = "Run code";
    btn.disabled = false;
  });
</script>
```

```{r}
#| results: asis
#| echo: false
webr_counter = 0
cat("importScripts('https://webr.r-wasm.org/v0.1.0/webr-worker.js');", file = "webr-worker.js")
cat("importScripts('https://webr.r-wasm.org/v0.1.0/webr-serviceworker.js');", file = "webr-serviceworker.js")
webr_editor = function(code = I(encodeString(code, quote = '`')), width, height) { 
webr_counter <<- webr_counter + 1
output = glue::glue('
<button class="btn btn-default btn-webr" disabled type="button"  id="webr-run-button-{{ webr_counter }}">Loading webR...</button>
<div id="webr-editor-{{ webr_counter }}"></div>
<div id="webr-code-output-{{ webr_counter }}"><pre style="visibility: hidden"></pre></div>
<script type="module">
  const runButton = document.getElementById("webr-run-button-{{ webr_counter }}");
  const outputDiv = document.getElementById("webr-code-output-{{ webr_counter }}");
  const editorDiv = document.getElementById("webr-editor-{{ webr_counter }}");
  const editor = CodeMirror((elt) => {
    elt.style.border = "1px solid #eee";
    elt.style.height = "auto";
    editorDiv.append(elt);
  },{
    value: {{code}},
    lineNumbers: true,
    mode: "r",
    theme: "light default",
    viewportMargin: Infinity,
  });
  runButton.onclick = async () => {
    runButton.disabled = true;
    let canvas = undefined;
    await globalThis.webR.init();
    await webR.evalRVoid("canvas(width={{width}}, height={{height}})");
    const result = await webRCodeShelter.captureR(editor.getValue(), {
      withAutoprint: true,
      captureStreams: true,
      captureConditions: false,
      env: webR.objs.emptyEnv,
    });
    try {
      await webR.evalRVoid("dev.off()");
      const out = result.output.filter(
        evt => evt.type == "stdout" || evt.type == "stderr"
      ).map((evt) => evt.data).join("\\n");
      const msgs = await webR.flush();
      msgs.forEach(msg => {
        if (msg.type === "canvasExec"){
          if (!canvas) {
            canvas = document.createElement("canvas");
            canvas.setAttribute("width", 2 * {{width}});
            canvas.setAttribute("height", 2 * {{height}});
            canvas.style.width="700px";
            canvas.style.display="block";
            canvas.style.margin="auto";
          }
          Function(`this.getContext("2d").${msg.data}`).bind(canvas)();
        }
      });
      outputDiv.innerHTML = "";
      const pre = document.createElement("pre");
      if (/\\S/.test(out)) {
        const code = document.createElement("code");
        code.innerText = out;
        pre.appendChild(code);
      } else {
        pre.style.visibility = "hidden";
      }
      outputDiv.appendChild(pre);
      if (canvas) {
        const p = document.createElement("p");
        p.appendChild(canvas);
        outputDiv.appendChild(p);
      }
    } finally {
      webRCodeShelter.purge();
      runButton.disabled = false;
    }
  }
  await globalThis.webR.init();
  runButton.innerText = "Run code";
  runButton.disabled = false;
</script>
', .open = "{{", .close = "}}")
}
```

```{r}
#| echo: false
knitr::knit_engines$set(webr = function(options) {
  code = paste(options$code, collapse = "\n")
  w = knitr::opts_current$get('fig.width') * 72
  h = knitr::opts_current$get('fig.height') * 72
  options$results = 'asis'
  
  form = webr_editor(code = I(encodeString(code, quote = '`')), width = w, height = h)
  
  form
}
)
```

## webR test

This is just a test to see if webR works.

```{webr}
fit = lm(mpg ~ am, data=mtcars)
summary(fit)
```


## webR

Most R packages are not compiled for webR. Wasn't able to get it working, but will come back and fiddle sometime soon.

```{r, eval=FALSE, echo=FALSE}
test <- httr::GET("https://api.osf.io/v2/nodes/k5w3d/files/osfstorage/?filter[kind]=file")


content <- rawToChar(test$content)
r_content <- jsonlite::fromJSON(content)
```

```{=html}
<script type="text/javascript" src="https://unpkg.com/d3@7.8.0/dist/d3.min.js"></script>
<script>

let tryd3 = d3.request("https://api.osf.io/v2/nodes/k5w3d/files/osfstorage/?filter[kind]=file").get(callback);
</script>
```
